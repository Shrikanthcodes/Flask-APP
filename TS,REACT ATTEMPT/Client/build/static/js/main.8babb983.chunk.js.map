{"version":3,"sources":["components/Login.tsx","components/Register.tsx","components/PokemonList.tsx","components/ColorSelect.tsx","event/AuthContext.tsx","event/PokemonContext.tsx","app.tsx","index.tsx"],"names":["Login","_ref","onLogin","_useState","useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_jsxs","onSubmit","e","preventDefault","children","_jsx","htmlFor","type","id","value","onChange","target","Register","onRegister","email","setEmail","_useState5","_useState6","PokemonList","pokemonList","map","pokemon","name","ColorSelect","colors","selectedColor","onColorChange","color","AuthContext","createContext","undefined","AuthProvider","isAuthenticated","setIsAuthenticated","Provider","login","logout","PokemonContext","PokemonProvider","setPokemonList","filteredPokemonList","setFilteredPokemonList","setSelectedColor","useEffect","fetchPokemon","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","response","data","fetchDetails","fetchedPokemonList","wrap","_context2","prev","next","fetch","sent","json","_ref3","_callee","url","res","details","_context","abrupt","types","stop","_x","apply","arguments","Promise","all","results","result","t0","console","error","filter","setColorFilter","AppContent","_useAuth","context","useContext","Error","useAuth","_usePokemon","usePokemon","onClick","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8babb983.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface LoginProps {\r\n  onLogin: (username: string, password: string) => void;\r\n}\r\n\r\nconst Login = ({ onLogin }: LoginProps) => {\r\n  // ... same component implementation\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onLogin(username, password);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>Login</h2>\r\n      <label htmlFor=\"username\">Username:</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"username\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n      />\r\n      <label htmlFor=\"password\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\n\r\ninterface RegisterProps {\r\n  onRegister: (username: string, email: string, password: string) => void;\r\n}\r\n\r\nconst Register = ({ onRegister }: RegisterProps) => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        onRegister(username, email, password);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <h2>Register</h2>\r\n        <label htmlFor=\"username\">Username:</label>\r\n        <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">Email:</label>\r\n        <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">Password:</label>\r\n        <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Register</button>\r\n        </form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\ninterface PokemonListProps {\r\n  pokemonList: Pokemon[];\r\n}\r\n\r\nconst PokemonList = ({ pokemonList }: PokemonListProps) => {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {pokemonList.map((pokemon) => (\r\n                <tr key={pokemon.name}>\r\n                    <td>{pokemon.name}</td>\r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default PokemonList;","import React from 'react';\r\n\r\ninterface ColorSelectProps {\r\n  colors: string[];\r\n  selectedColor: string;\r\n  onColorChange: (color: string) => void;\r\n}\r\n\r\nconst ColorSelect = ({ colors, selectedColor, onColorChange }: ColorSelectProps) => {\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"color-select\">Filter by color:</label>\r\n            <select\r\n                id=\"color-select\"\r\n                value={selectedColor}\r\n                onChange={(e) => onColorChange(e.target.value)}\r\n            >\r\n            <option value=\"\">All</option>\r\n                {colors.map((color) => (\r\n                <option key={color} value={color}>\r\n                    {color}\r\n                </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorSelect;\r\n","import { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ninterface AuthState {\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => void;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthState | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const login = (username: string, password: string) => {\r\n    // Add your login logic here (e.g., call your API to authenticate the user)\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Add your logout logic here (e.g., clear any stored tokens)\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","// PokemonContext.tsx\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  url: string;\r\n  color: string; // Added color property\r\n}\r\n\r\ninterface PokemonState {\r\n  pokemonList: Pokemon[];\r\n  filteredPokemonList: Pokemon[];\r\n  selectedColor: string;\r\n  setColorFilter: (color: string) => void;\r\n}\r\n\r\nconst PokemonContext = createContext<PokemonState | undefined>(undefined);\r\n\r\nexport const usePokemon = () => {\r\n  const context = useContext(PokemonContext);\r\n  if (!context) {\r\n    throw new Error('usePokemon must be used within a PokemonProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface PokemonProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const PokemonProvider: React.FC<PokemonProviderProps> = ({ children }) => {\r\n    const [pokemonList, setPokemonList] = useState<Pokemon[]>([]);\r\n    const [filteredPokemonList, setFilteredPokemonList] = useState<Pokemon[]>([]);\r\n    const [selectedColor, setSelectedColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchPokemon = async () => {\r\n      try {\r\n        const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');\r\n        const data = await response.json();\r\n\r\n        const fetchDetails = async (url: string) => {\r\n          const res = await fetch(url);\r\n          const details = await res.json();\r\n          return {\r\n            name: details.name,\r\n            url,\r\n            color: details.types[0].type.name,\r\n          };\r\n        };\r\n\r\n        const fetchedPokemonList: Pokemon[] = await Promise.all(\r\n          data.results.map((result: { url: string }) => fetchDetails(result.url))\r\n        );\r\n\r\n        setPokemonList(fetchedPokemonList);\r\n      } catch (error) {\r\n        console.error('Failed to fetch Pokemon data:', error);\r\n      }\r\n    };\r\n\r\n    fetchPokemon();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const filterPokemon = () => {\r\n      if (selectedColor) {\r\n        setFilteredPokemonList(\r\n          pokemonList.filter((pokemon) => pokemon.color === selectedColor)\r\n        );\r\n      } else {\r\n        setFilteredPokemonList(pokemonList);\r\n      }\r\n    };\r\n\r\n    filterPokemon();\r\n  }, [selectedColor, pokemonList]);\r\n\r\n  const setColorFilter = (color: string) => {\r\n    setSelectedColor(color);\r\n  };\r\n\r\n  return (\r\n    <PokemonContext.Provider\r\n      value={{ pokemonList, filteredPokemonList, selectedColor, setColorFilter }}\r\n    >\r\n      {children}\r\n    </PokemonContext.Provider>\r\n  );\r\n};\r\n","// App.tsx\r\nimport React from 'react';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport PokemonList from './components/PokemonList';\r\nimport ColorSelect from './components/ColorSelect';\r\nimport { AuthProvider, useAuth } from './event/AuthContext';\r\nimport { PokemonProvider, usePokemon } from './event/PokemonContext';\r\n\r\nconst AppContent = () => {\r\n  const { isAuthenticated, login, logout } = useAuth();\r\n  const { filteredPokemonList, selectedColor, setColorFilter } = usePokemon();\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div>\r\n        <Login onLogin={login} />\r\n        <Register onRegister={(username, email, password) => {}} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={logout}>Logout</button>\r\n      <ColorSelect\r\n        colors={['Red', 'Blue', 'Green']} // Example colors, replace with actual colors.\r\n        selectedColor={selectedColor}\r\n        onColorChange={setColorFilter}\r\n      />\r\n      <PokemonList pokemonList={filteredPokemonList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <PokemonProvider>\r\n        <div className=\"app\">\r\n          <h1>Pokemon App</h1>\r\n          <AppContent />\r\n        </div>\r\n      </PokemonProvider>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport './styles.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}